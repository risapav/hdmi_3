|top
LED1 <= Test:test.LED1
LED2 <= Test:test.LED2
LED3 <= Test:test.LED3
P3_2 => ~NO_FANOUT~
P3_3 => ~NO_FANOUT~
P3_4 => ~NO_FANOUT~
P4_2 => ~NO_FANOUT~
P5_2 => ~NO_FANOUT~
P5_3 => ~NO_FANOUT~
P6_2 => ~NO_FANOUT~
P6_3 => ~NO_FANOUT~
P8_3 => ~NO_FANOUT~
P8_4 => ~NO_FANOUT~
P8_5 => ~NO_FANOUT~
P8_6 => ~NO_FANOUT~
P8_7 => ~NO_FANOUT~
P8_8 => ~NO_FANOUT~
P8_9 => ~NO_FANOUT~
P8_10 => ~NO_FANOUT~
P8_11 => ~NO_FANOUT~
P8_12 => ~NO_FANOUT~
P8_13 => ~NO_FANOUT~
P8_14 => ~NO_FANOUT~
P8_15 => ~NO_FANOUT~
P8_16 => ~NO_FANOUT~
S1 => S1.IN1
S2 => ~NO_FANOUT~
S3 => ~NO_FANOUT~
SDA => ~NO_FANOUT~
SDC => ~NO_FANOUT~
sys_clk => sys_clk.IN2


|top|Test:test
CLK => CLK.IN1
LED1 <= Divider:b2v_div1.sig_out
LED2 <= Divider:b2v_div3.sig_out
LED3 <= Divider:b2v_div2.sig_out


|top|Test:test|pll:b2v_inst
areset => altpll:altpll_component.areset
inclk0 => altpll:altpll_component.inclk[0]
c0 <= altpll:altpll_component.clk[0]
c1 <= altpll:altpll_component.clk[1]
c2 <= altpll:altpll_component.clk[2]
c3 <= altpll:altpll_component.clk[3]


|top|Test:test|pll:b2v_inst|altpll:altpll_component
inclk[0] => pll_altpll1:auto_generated.inclk[0]
inclk[1] => pll_altpll1:auto_generated.inclk[1]
fbin => ~NO_FANOUT~
pllena => ~NO_FANOUT~
clkswitch => ~NO_FANOUT~
areset => pll_altpll1:auto_generated.areset
pfdena => ~NO_FANOUT~
clkena[0] => ~NO_FANOUT~
clkena[1] => ~NO_FANOUT~
clkena[2] => ~NO_FANOUT~
clkena[3] => ~NO_FANOUT~
clkena[4] => ~NO_FANOUT~
clkena[5] => ~NO_FANOUT~
extclkena[0] => ~NO_FANOUT~
extclkena[1] => ~NO_FANOUT~
extclkena[2] => ~NO_FANOUT~
extclkena[3] => ~NO_FANOUT~
scanclk => ~NO_FANOUT~
scanclkena => ~NO_FANOUT~
scanaclr => ~NO_FANOUT~
scanread => ~NO_FANOUT~
scanwrite => ~NO_FANOUT~
scandata => ~NO_FANOUT~
phasecounterselect[0] => ~NO_FANOUT~
phasecounterselect[1] => ~NO_FANOUT~
phasecounterselect[2] => ~NO_FANOUT~
phasecounterselect[3] => ~NO_FANOUT~
phaseupdown => ~NO_FANOUT~
phasestep => ~NO_FANOUT~
configupdate => ~NO_FANOUT~
fbmimicbidir <> <GND>
clk[0] <= clk[0].DB_MAX_OUTPUT_PORT_TYPE
clk[1] <= clk[1].DB_MAX_OUTPUT_PORT_TYPE
clk[2] <= clk[2].DB_MAX_OUTPUT_PORT_TYPE
clk[3] <= clk[3].DB_MAX_OUTPUT_PORT_TYPE
clk[4] <= clk[4].DB_MAX_OUTPUT_PORT_TYPE
extclk[0] <= <GND>
extclk[1] <= <GND>
extclk[2] <= <GND>
extclk[3] <= <GND>
clkbad[0] <= <GND>
clkbad[1] <= <GND>
enable1 <= <GND>
enable0 <= <GND>
activeclock <= <GND>
clkloss <= <GND>
locked <= <GND>
scandataout <= <GND>
scandone <= <GND>
sclkout0 <= <GND>
sclkout1 <= <GND>
phasedone <= <GND>
vcooverrange <= <GND>
vcounderrange <= <GND>
fbout <= <GND>
fref <= <GND>
icdrclk <= <GND>


|top|Test:test|pll:b2v_inst|altpll:altpll_component|pll_altpll1:auto_generated
areset => pll1.ARESET
clk[0] <= pll1.CLK
clk[1] <= pll1.CLK1
clk[2] <= pll1.CLK2
clk[3] <= pll1.CLK3
clk[4] <= pll1.CLK4
inclk[0] => pll1.CLK
inclk[1] => pll1.CLK1


|top|Test:test|Divider:b2v_div1
sig_in => counter[0].CLK
sig_in => counter[1].CLK
sig_in => counter[2].CLK
sig_in => counter[3].CLK
sig_in => counter[4].CLK
sig_in => counter[5].CLK
sig_in => counter[6].CLK
sig_in => counter[7].CLK
sig_in => counter[8].CLK
sig_in => counter[9].CLK
sig_in => counter[10].CLK
sig_in => counter[11].CLK
sig_in => counter[12].CLK
sig_in => counter[13].CLK
sig_in => counter[14].CLK
sig_in => counter[15].CLK
sig_in => counter[16].CLK
sig_in => counter[17].CLK
sig_in => counter[18].CLK
sig_in => counter[19].CLK
sig_in => counter[20].CLK
sig_in => counter[21].CLK
sig_in => counter[22].CLK
sig_in => counter[23].CLK
sig_in => counter[24].CLK
sig_in => counter[25].CLK
sig_in => counter[26].CLK
sig_in => counter[27].CLK
sig_out <= LessThan1.DB_MAX_OUTPUT_PORT_TYPE


|top|Test:test|Divider:b2v_div2
sig_in => counter[0].CLK
sig_in => counter[1].CLK
sig_in => counter[2].CLK
sig_in => counter[3].CLK
sig_in => counter[4].CLK
sig_in => counter[5].CLK
sig_in => counter[6].CLK
sig_in => counter[7].CLK
sig_in => counter[8].CLK
sig_in => counter[9].CLK
sig_in => counter[10].CLK
sig_in => counter[11].CLK
sig_in => counter[12].CLK
sig_in => counter[13].CLK
sig_in => counter[14].CLK
sig_in => counter[15].CLK
sig_in => counter[16].CLK
sig_in => counter[17].CLK
sig_in => counter[18].CLK
sig_in => counter[19].CLK
sig_in => counter[20].CLK
sig_in => counter[21].CLK
sig_in => counter[22].CLK
sig_in => counter[23].CLK
sig_in => counter[24].CLK
sig_in => counter[25].CLK
sig_in => counter[26].CLK
sig_in => counter[27].CLK
sig_out <= LessThan1.DB_MAX_OUTPUT_PORT_TYPE


|top|Test:test|Divider:b2v_div3
sig_in => counter[0].CLK
sig_in => counter[1].CLK
sig_in => counter[2].CLK
sig_in => counter[3].CLK
sig_in => counter[4].CLK
sig_in => counter[5].CLK
sig_in => counter[6].CLK
sig_in => counter[7].CLK
sig_in => counter[8].CLK
sig_in => counter[9].CLK
sig_in => counter[10].CLK
sig_in => counter[11].CLK
sig_in => counter[12].CLK
sig_in => counter[13].CLK
sig_in => counter[14].CLK
sig_in => counter[15].CLK
sig_in => counter[16].CLK
sig_in => counter[17].CLK
sig_in => counter[18].CLK
sig_in => counter[19].CLK
sig_in => counter[20].CLK
sig_in => counter[21].CLK
sig_in => counter[22].CLK
sig_in => counter[23].CLK
sig_in => counter[24].CLK
sig_in => counter[25].CLK
sig_in => counter[26].CLK
sig_in => counter[27].CLK
sig_out <= LessThan1.DB_MAX_OUTPUT_PORT_TYPE


|top|UART_wrapper:iUART_WRAP
clr_cmd_rdy => cmd_rdy.OUTPUTSELECT
cmd_rdy <= cmd_rdy~reg0.DB_MAX_OUTPUT_PORT_TYPE
snd_resp => snd_resp.IN1
resp_sent <= UART:iUART.tx_done
cmd[0] <= high_byte[0].DB_MAX_OUTPUT_PORT_TYPE
cmd[1] <= high_byte[1].DB_MAX_OUTPUT_PORT_TYPE
cmd[2] <= high_byte[2].DB_MAX_OUTPUT_PORT_TYPE
cmd[3] <= high_byte[3].DB_MAX_OUTPUT_PORT_TYPE
cmd[4] <= high_byte[4].DB_MAX_OUTPUT_PORT_TYPE
cmd[5] <= high_byte[5].DB_MAX_OUTPUT_PORT_TYPE
cmd[6] <= high_byte[6].DB_MAX_OUTPUT_PORT_TYPE
cmd[7] <= high_byte[7].DB_MAX_OUTPUT_PORT_TYPE
data[0] <= UART:iUART.rx_data
data[1] <= UART:iUART.rx_data
data[2] <= UART:iUART.rx_data
data[3] <= UART:iUART.rx_data
data[4] <= UART:iUART.rx_data
data[5] <= UART:iUART.rx_data
data[6] <= UART:iUART.rx_data
data[7] <= UART:iUART.rx_data
data[8] <= mid_byte[0].DB_MAX_OUTPUT_PORT_TYPE
data[9] <= mid_byte[1].DB_MAX_OUTPUT_PORT_TYPE
data[10] <= mid_byte[2].DB_MAX_OUTPUT_PORT_TYPE
data[11] <= mid_byte[3].DB_MAX_OUTPUT_PORT_TYPE
data[12] <= mid_byte[4].DB_MAX_OUTPUT_PORT_TYPE
data[13] <= mid_byte[5].DB_MAX_OUTPUT_PORT_TYPE
data[14] <= mid_byte[6].DB_MAX_OUTPUT_PORT_TYPE
data[15] <= mid_byte[7].DB_MAX_OUTPUT_PORT_TYPE
resp[0] => tx_data[0].IN1
resp[1] => tx_data[1].IN1
resp[2] => tx_data[2].IN1
resp[3] => tx_data[3].IN1
resp[4] => tx_data[4].IN1
resp[5] => tx_data[5].IN1
resp[6] => tx_data[6].IN1
resp[7] => tx_data[7].IN1
clk => clk.IN1
RX => RX.IN1
TX <= UART:iUART.TX
rst_n => rst_n.IN1


|top|UART_wrapper:iUART_WRAP|UART:iUART
clk => clk.IN2
rst_n => rst_n.IN2
RX => RX.IN1
TX <= UART_tx:iTX.TX
rx_rdy <= UART_rcv:iRX.rdy
clr_rx_rdy => clr_rx_rdy.IN1
rx_data[0] <= UART_rcv:iRX.rx_data
rx_data[1] <= UART_rcv:iRX.rx_data
rx_data[2] <= UART_rcv:iRX.rx_data
rx_data[3] <= UART_rcv:iRX.rx_data
rx_data[4] <= UART_rcv:iRX.rx_data
rx_data[5] <= UART_rcv:iRX.rx_data
rx_data[6] <= UART_rcv:iRX.rx_data
rx_data[7] <= UART_rcv:iRX.rx_data
trmt => trmt.IN1
tx_data[0] => tx_data[0].IN1
tx_data[1] => tx_data[1].IN1
tx_data[2] => tx_data[2].IN1
tx_data[3] => tx_data[3].IN1
tx_data[4] => tx_data[4].IN1
tx_data[5] => tx_data[5].IN1
tx_data[6] => tx_data[6].IN1
tx_data[7] => tx_data[7].IN1
tx_done <= UART_tx:iTX.tx_done


|top|UART_wrapper:iUART_WRAP|UART:iUART|UART_tx:iTX
clk => tx_done~reg0.CLK
clk => shift_reg[0].CLK
clk => shift_reg[1].CLK
clk => shift_reg[2].CLK
clk => shift_reg[3].CLK
clk => shift_reg[4].CLK
clk => shift_reg[5].CLK
clk => shift_reg[6].CLK
clk => shift_reg[7].CLK
clk => shift_reg[8].CLK
clk => baud_cnt[0].CLK
clk => baud_cnt[1].CLK
clk => baud_cnt[2].CLK
clk => baud_cnt[3].CLK
clk => baud_cnt[4].CLK
clk => baud_cnt[5].CLK
clk => baud_cnt[6].CLK
clk => baud_cnt[7].CLK
clk => baud_cnt[8].CLK
clk => baud_cnt[9].CLK
clk => baud_cnt[10].CLK
clk => baud_cnt[11].CLK
clk => bit_cnt[0].CLK
clk => bit_cnt[1].CLK
clk => bit_cnt[2].CLK
clk => bit_cnt[3].CLK
clk => state.CLK
rst_n => shift_reg[0].PRESET
rst_n => shift_reg[1].PRESET
rst_n => shift_reg[2].PRESET
rst_n => shift_reg[3].PRESET
rst_n => shift_reg[4].PRESET
rst_n => shift_reg[5].PRESET
rst_n => shift_reg[6].PRESET
rst_n => shift_reg[7].PRESET
rst_n => shift_reg[8].PRESET
rst_n => tx_done~reg0.ACLR
rst_n => state.ACLR
rst_n => bit_cnt[0].ACLR
rst_n => bit_cnt[1].ACLR
rst_n => bit_cnt[2].ACLR
rst_n => bit_cnt[3].ACLR
rst_n => baud_cnt[0].ACLR
rst_n => baud_cnt[1].ACLR
rst_n => baud_cnt[2].PRESET
rst_n => baud_cnt[3].PRESET
rst_n => baud_cnt[4].ACLR
rst_n => baud_cnt[5].PRESET
rst_n => baud_cnt[6].ACLR
rst_n => baud_cnt[7].ACLR
rst_n => baud_cnt[8].ACLR
rst_n => baud_cnt[9].PRESET
rst_n => baud_cnt[10].ACLR
rst_n => baud_cnt[11].PRESET
TX <= shift_reg[0].DB_MAX_OUTPUT_PORT_TYPE
trmt => tx_done.OUTPUTSELECT
trmt => nxt_state.DATAA
trmt => load.DATAA
tx_data[0] => shift_reg.DATAB
tx_data[1] => shift_reg.DATAB
tx_data[2] => shift_reg.DATAB
tx_data[3] => shift_reg.DATAB
tx_data[4] => shift_reg.DATAB
tx_data[5] => shift_reg.DATAB
tx_data[6] => shift_reg.DATAB
tx_data[7] => shift_reg.DATAB
tx_done <= tx_done~reg0.DB_MAX_OUTPUT_PORT_TYPE


|top|UART_wrapper:iUART_WRAP|UART:iUART|UART_rcv:iRX
clk => rx_ff2.CLK
clk => rx_ff1.CLK
clk => rdy~reg0.CLK
clk => shift_reg[0].CLK
clk => shift_reg[1].CLK
clk => shift_reg[2].CLK
clk => shift_reg[3].CLK
clk => shift_reg[4].CLK
clk => shift_reg[5].CLK
clk => shift_reg[6].CLK
clk => shift_reg[7].CLK
clk => shift_reg[8].CLK
clk => baud_cnt[0].CLK
clk => baud_cnt[1].CLK
clk => baud_cnt[2].CLK
clk => baud_cnt[3].CLK
clk => baud_cnt[4].CLK
clk => baud_cnt[5].CLK
clk => baud_cnt[6].CLK
clk => baud_cnt[7].CLK
clk => baud_cnt[8].CLK
clk => baud_cnt[9].CLK
clk => baud_cnt[10].CLK
clk => baud_cnt[11].CLK
clk => bit_cnt[0].CLK
clk => bit_cnt[1].CLK
clk => bit_cnt[2].CLK
clk => bit_cnt[3].CLK
clk => state.CLK
rst_n => baud_cnt[0].ACLR
rst_n => baud_cnt[1].PRESET
rst_n => baud_cnt[2].PRESET
rst_n => baud_cnt[3].ACLR
rst_n => baud_cnt[4].PRESET
rst_n => baud_cnt[5].ACLR
rst_n => baud_cnt[6].ACLR
rst_n => baud_cnt[7].ACLR
rst_n => baud_cnt[8].PRESET
rst_n => baud_cnt[9].ACLR
rst_n => baud_cnt[10].PRESET
rst_n => baud_cnt[11].ACLR
rst_n => bit_cnt[0].ACLR
rst_n => bit_cnt[1].ACLR
rst_n => bit_cnt[2].ACLR
rst_n => bit_cnt[3].ACLR
rst_n => rdy~reg0.ACLR
rst_n => state.ACLR
rst_n => rx_ff2.PRESET
rst_n => rx_ff1.PRESET
RX => rx_ff1.DATAIN
rdy <= rdy~reg0.DB_MAX_OUTPUT_PORT_TYPE
rx_data[0] <= shift_reg[0].DB_MAX_OUTPUT_PORT_TYPE
rx_data[1] <= shift_reg[1].DB_MAX_OUTPUT_PORT_TYPE
rx_data[2] <= shift_reg[2].DB_MAX_OUTPUT_PORT_TYPE
rx_data[3] <= shift_reg[3].DB_MAX_OUTPUT_PORT_TYPE
rx_data[4] <= shift_reg[4].DB_MAX_OUTPUT_PORT_TYPE
rx_data[5] <= shift_reg[5].DB_MAX_OUTPUT_PORT_TYPE
rx_data[6] <= shift_reg[6].DB_MAX_OUTPUT_PORT_TYPE
rx_data[7] <= shift_reg[7].DB_MAX_OUTPUT_PORT_TYPE
clr_rdy => always4.IN1


